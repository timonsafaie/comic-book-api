// Generated by CoffeeScript 1.12.7
(function() {
  var DustUtil,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  DustUtil = (function() {
    function DustUtil(dust) {
      this.ensure_empty_template = bind(this.ensure_empty_template, this);
      this.compile_template = bind(this.compile_template, this);
      this.ensure_dust = bind(this.ensure_dust, this);
      this.get_dust = bind(this.get_dust, this);
      this.set_dust = bind(this.set_dust, this);
      this.set_dust(dust);
    }

    DustUtil.prototype.set_dust = function(dust) {
      return this.dust = dust;
    };

    DustUtil.prototype.get_dust = function() {
      return this.dust;
    };

    DustUtil.prototype.ensure_dust = function() {
      if (this.dust != null) {
        return this.dust;
      } else {
        this.set_dust(require('dustjs-linkedin'));
        return this.dust;
      }
    };

    DustUtil.prototype.compile_template = function(template_source) {
      return this.ensure_dust().compileFn(template_source);
    };

    DustUtil.prototype.render_template = function(template, context, callback) {
      if (typeof context === 'function' && (callback == null)) {
        callback = context;
        context = null;
      }
      if (context == null) {
        context = {};
      }
      if (typeof template === 'function') {
        return template(context, callback);
      } else {
        return this.ensure_dust().renderSource(template, context, callback);
      }
    };

    DustUtil.prototype.eval_dust_string = function(str, chunk, context) {
      var buf;
      if (typeof str === "function") {
        if (str.length === 0) {
          str = str();
        } else {
          buf = '';
          (chunk.tap(function(data) {
            buf += data;
            return '';
          })).render(str, context).untap();
          str = buf;
        }
      }
      return str;
    };

    DustUtil.prototype.render_if_else = function(b, chunk, context, bodies, params) {
      if (b === true) {
        if ((bodies != null ? bodies.block : void 0) != null) {
          chunk = chunk.render(bodies.block, context);
        }
      } else {
        if ((bodies != null ? bodies["else"] : void 0) != null) {
          chunk = chunk.render(bodies["else"], context);
        }
      }
      return chunk;
    };

    DustUtil.prototype.ctx_get = function(context, names, default_value) {
      var get, i, len, name, val;
      if (context == null) {
        return default_value;
      } else {
        if (!Array.isArray(names)) {
          names = [names];
        }
        if (typeof context.get === 'function' && (context.stack != null)) {
          get = function(x) {
            return context.get(x);
          };
        } else {
          get = function(x) {
            return context[x];
          };
        }
        for (i = 0, len = names.length; i < len; i++) {
          name = names[i];
          val = get(name);
          if (val != null) {
            return val;
          }
        }
        return default_value;
      }
    };

    DustUtil.prototype.maybe_capture_block = function(chunk, block, context, callback) {
      return callback(this.eval_dust_string(block != null ? block : "", chunk, context), chunk);
    };

    DustUtil.prototype.ensure_empty_template = function() {
      if (this.empty_template == null) {
        this.empty_template = this.compile_template("");
      }
      return this.empty_template;
    };

    return DustUtil;

  })();

  exports.DustUtil = new DustUtil();

  exports.DustUtil.constructor = exports.DustUtil.DustUtil = DustUtil;

  exports.DustUtil.init = function(dust) {
    return new DustUtil(dust);
  };

}).call(this);
